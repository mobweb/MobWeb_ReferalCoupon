<?php

class MobWeb_ReferalCoupon_Helper_Data extends Mage_Core_Helper_Abstract
{
	public $cookie_name = 'mobweb_referalcoupon_cookie';
	public $shopping_cart_rule_id; // The ID of the shopping cart rule that will be used to create the coupon codes
	public $transactional_email_id; // The ID of the transactional email template that will be used to send the coupon to the referrer
	public $log_file = 'mobweb_referalcoupon.log';

	public function createCoupons($count = 1, $string = '')
	{
		// Check if a shopping cart rule has been assigned, if not, abort
		if(!$this->shopping_cart_rule_id || !$rule = Mage::getModel('salesrule/rule')->load($this->shopping_cart_rule_id)) {
			// Create a log entry
			Mage::helper('referalcoupon')->log('Invalid or unknown shopping cart rule ID specified: ' . $this->shopping_cart_rule_id);
			return false;
		}
		
		// Define a coupon code generator model instance
		// Look at Mage_SalesRule_Model_Coupon_Massgenerator for options
		$generator = Mage::getModel('salesrule/coupon_massgenerator');

		$parameters = array(
		    'count' => $count,
		    'format' => 'alphanumeric',
		    'dash_every_x_characters' => 4,
		    'prefix' => $string . '-',
		    'suffix' => '',
		    'length' => 4
		);

		if(!empty($parameters['format'])){
		  switch(strtolower($parameters['format'])){
		    case 'alphanumeric':
		    case 'alphanum':
		      $generator->setFormat(Mage_SalesRule_Helper_Coupon::COUPON_FORMAT_ALPHANUMERIC);
		      break;
		    case 'alphabetical':
		    case 'alpha':
		      $generator->setFormat(Mage_SalesRule_Helper_Coupon::COUPON_FORMAT_ALPHABETICAL);
		      break;
		    case 'numeric':
		    case 'num':
		      $generator->setFormat(Mage_SalesRule_Helper_Coupon::COUPON_FORMAT_NUMERIC);
		      break;
		  }
		}

		$generator->setDash(!empty($parameters['dash_every_x_characters'])? (int) $parameters['dash_every_x_characters'] : 0);
		$generator->setLength(!empty($parameters['length']) ? (int) $parameters['length'] : 6);
		$generator->setPrefix(!empty($parameters['prefix']) ? $parameters['prefix'] : '');
		$generator->setSuffix(!empty($parameters['suffix']) ? $parameters['suffix'] : '');

		// Set the generator, and coupon type so it's able to generate
		$rule->setCouponCodeGenerator($generator);
		$rule->setCouponType(Mage_SalesRule_Model_Rule::COUPON_TYPE_AUTO);

		// Get as many coupons as you required
		$count = !empty($parameters['count']) ? (int) $parameters['count'] : 1;
		$codes = array();

		for($i = 0; $i < $count; $i++) {
			$coupon = $rule->acquireCoupon()->setType(Mage_SalesRule_Helper_Coupon::COUPON_TYPE_SPECIFIC_AUTOGENERATED)->save();
			$code = $coupon->getCode();
			$codes[] = $code;
		}

		return $codes;
	}

	public function log($msg)
	{
		Mage::log($msg, NULL, $this->log_file);
	}
}